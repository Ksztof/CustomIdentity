// <auto-generated />
using System;
using CustomIdentity.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CustomIdentity.Domain.Migrations
{
    [DbContext(typeof(CustomIdentityDb))]
    partial class CustomIdentityDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.Tokens", b =>
                {
                    b.Property<int>("TokensId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokensId"));

                    b.Property<string>("RefreshJwtToken")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationJwtToken")
                        .HasColumnType("text");

                    b.Property<int?>("UserCredentialsId")
                        .HasColumnType("integer");

                    b.HasKey("TokensId");

                    b.HasIndex("UserCredentialsId")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCredentialsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserAuthMethod", b =>
                {
                    b.Property<int>("UserAuthMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserAuthMethodId"));

                    b.Property<string>("UserAuthMethodName")
                        .HasColumnType("text");

                    b.HasKey("UserAuthMethodId");

                    b.ToTable("UserAuthMethod");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserCredentials", b =>
                {
                    b.Property<int>("UserCredentialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserCredentialsId"));

                    b.Property<bool>("AccountDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("AccountVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("CredentialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int?>("UserAuthMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserCredentialsId");

                    b.HasIndex("UserAuthMethodId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserCredentials");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserPermissions", b =>
                {
                    b.Property<int>("UserPermissionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserPermissionsId"));

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserPermissionsId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserProfileId"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("text");

                    b.HasKey("UserProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserRoles", b =>
                {
                    b.Property<int?>("UserPermissionsId")
                        .HasColumnType("integer");

                    b.Property<int?>("WebAppRoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserPermissionsId", "WebAppRoleId");

                    b.HasIndex("WebAppRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.WebAppRole", b =>
                {
                    b.Property<int>("WebAppRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WebAppRoleId"));

                    b.Property<string>("WebAppRoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WebAppRoleId");

                    b.ToTable("WebAppRole");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.Tokens", b =>
                {
                    b.HasOne("CustomIdentity.Domain.DatabaseModels.Identities.UserCredentials", "UserCredential")
                        .WithOne("Tokens")
                        .HasForeignKey("CustomIdentity.Domain.DatabaseModels.Identities.Tokens", "UserCredentialsId");

                    b.Navigation("UserCredential");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserCredentials", b =>
                {
                    b.HasOne("CustomIdentity.Domain.DatabaseModels.Identities.UserAuthMethod", "UserAuthMethod")
                        .WithMany("UserCredentials")
                        .HasForeignKey("UserAuthMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CustomIdentity.Domain.DatabaseModels.Identities.User", "User")
                        .WithOne("Credentials")
                        .HasForeignKey("CustomIdentity.Domain.DatabaseModels.Identities.UserCredentials", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");

                    b.Navigation("UserAuthMethod");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserPermissions", b =>
                {
                    b.HasOne("CustomIdentity.Domain.DatabaseModels.Identities.User", "User")
                        .WithOne("UserPermissions")
                        .HasForeignKey("CustomIdentity.Domain.DatabaseModels.Identities.UserPermissions", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserProfile", b =>
                {
                    b.HasOne("CustomIdentity.Domain.DatabaseModels.Identities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("CustomIdentity.Domain.DatabaseModels.Identities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserRoles", b =>
                {
                    b.HasOne("CustomIdentity.Domain.DatabaseModels.Identities.UserPermissions", "UserPermissions")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomIdentity.Domain.DatabaseModels.Identities.WebAppRole", "WebAppRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("WebAppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPermissions");

                    b.Navigation("WebAppRole");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.User", b =>
                {
                    b.Navigation("Credentials")
                        .IsRequired();

                    b.Navigation("UserPermissions")
                        .IsRequired();

                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserAuthMethod", b =>
                {
                    b.Navigation("UserCredentials");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserCredentials", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.UserPermissions", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CustomIdentity.Domain.DatabaseModels.Identities.WebAppRole", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
